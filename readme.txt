計算機システム構成原理１演習 レポート課題 15TI023 池崎雄介

[ファイルの説明]
myshell.c : メインプログラム
	    入力の受付、解析、コマンドの実行を行う。
myshell.o : myshell.cのオブジェクトファイル
myshell : myshell.cの実行ファイル
ls.c : ファイルの情報を表示するコマンド
     ファイルの一覧
	$ ls
     指定したディレクトリ内のファイルの一覧
	$ ls [directory]
     指定したファイルの詳細
	$ ls [file]
     ファイルの詳細の一覧
	$ ls -l
ls.o : ls.cのオブジェクトファイル
cd.c : ディレクトリを移動するコマンド
     指定したディレクトリへの移動
	$ cd [directory]
cd.o : cd.cのオブジェクトファイル
mv.c : ファイルの名前を変更するコマンド
     ファイルの名前を指定した名前に変更
	$ mv [before name] [after name]
mv.o : mv.cのオブジェクトファイル
rm.c : ファイルを削除するコマンド
     指定したファイルの削除
	$ rm [file1] ([file2] ...)
rm.o : rm.cのオブジェクトファイル
ln.c : リンクを作成するコマンド
     ハードリンクの作成
	$ ln [file] [hard link]
     シンボリックリンクの作成
	$ ln -s [file] [symbolic link]
ln.o : ln.cのオブジェクトファイル
cp.c : ファイルをコピーするコマンド
     指定したファイルをコピー
	$ cp [source file] [copied file]
cp.o : cp.cのオブジェクトファイル
pwd.c : カレントディレクトリまでの絶対パスを表示するコマンド
      カレントディレクトリまでの絶対パスを表示
	$ pwd
pwd.o : pwd.cのオブジェクトファイル
echo.c : 引数をそのまま表示するコマンド
       引数をそのまま表示
	$ echo [args1] ([args2] ...)
echo.o : echo.cのオブジェクトファイル
cat.c : ファイルの内容を表示するコマンド
      指定したファイルの内容を表示
	$ cat [file]
cat.o : cat.cのオブジェクトファイル
head.c : ファイルの内容を10行まで表示するコマンド
       指定したファイルの内容を10行まで表示
	$ head [file]
head.o : head.cのオブジェクトファイル
exit.c : プログラムを終了するコマンド
       プログラムを終了
	$ exit
exit.o : exit.cのオブジェクトファイル
unknown.c : 未知コマンドへの対応をするプログラム
unknown.o : unknown.cのオブジェクトファイル
header.h : 必要なヘッダファイルをインクルードしたヘッダファイル
definition.h : 使用する定数を定義したヘッダファイル
command.h : 使用できるコマンドを宣言したヘッダファイル
	    header.hとdefinition.hもインクルードしている
Makefile : 必要なプログラムのコンパイル方法を定義したファイル
test/ : テスト用ディレクトリ
test/a.txt : テスト用ファイル1
test/b.txt : テスト用ファイル2
test/tmp/ : テスト用ディレクトリの作業ディレクトリ
test/tmp/a.txt : テスト用ファイル1のハードリンク
test/tmp/b.txt : テスト用ファイル2のシンボリックリンク
test/tmp/c.txt : テスト用FIFO
readme.txt : このファイル

[コンパイル方法]
$ make all

[実行方法]
$./myshell

[工夫した点]
・コマンド受付時に常にカレントディレクトリを表示するようにした。
	[myshell Myshell]$ cd test
	[myshell test]$
・ls [file]とls -lでより本物のlsに近づけるようにした。
     	[ファイルタイプとアクセス権限] [ハードリンクの数] [大きさ] [最終修正時刻] [ファイル名]
・エラー処理を徹底した。
	引数がない、引数の数が足りない、引数の数が多い
	ファイルやディレクトリが開けない
・headでは1行がバッファのサイズを越えるようなものに対応するため（あまりないとは思うが）、ファイルの内容を1文字ずつチェックすることにした。
・ヘッダファイルをできるだけ分割した。
	必要なヘッダファイルをインクルードしたもの
	使用する定数を定義したもの
	使用できるコマンドを宣言したもの

[結果に対する考察]
cdを何回か使っているとたまにカレントディレクトリ名に変な文字が入ってしまう。これは、mallocしたときにごみが代入されてしまい、文字列の長さが変わってしまうためであると考える。よって、malloc後に確保した領域に'\0'を代入することで防げるのではないかと思う。
また、コマンドを実装していく中で一番大変だったのがlsであった。これは、lsは一番基本的なコマンドであり、最もよく使われるため、より手間をかけて実装されているからではないかと思う。
